# Generated by Django 5.2.4 on 2025-08-05 12:23

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CivicCaptcha',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(help_text='Main question prompt (e.g., trivia, riddle, jumbled phrase)')),
                ('correct_answer', models.CharField(help_text='Expected correct answer (case-insensitive match)', max_length=100)),
                ('hint', models.TextField(blank=True, help_text='Optional hint to assist user in solving the captcha')),
                ('explanation', models.TextField(blank=True, help_text='Optional explanation shown after correct/incorrect answer (for civic learning)')),
                ('difficulty', models.IntegerField(default=1, help_text='Scale from 0 (very easy) to 5 (very hard)')),
                ('tags', models.CharField(blank=True, help_text="Comma-separated keywords like 'elections,leadership,constitution'", max_length=255)),
                ('slug', models.SlugField(help_text='Unique slug for referencing or analytics', unique=True)),
                ('active', models.BooleanField(default=True, help_text='Only active captchas will be used during registration or civic flow')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Civic Captcha',
                'verbose_name_plural': 'Civic Captchas',
            },
        ),
        migrations.CreateModel(
            name='JumbledConstituencyCaptcha',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(help_text='Main question prompt (e.g., trivia, riddle, jumbled phrase)')),
                ('correct_answer', models.CharField(help_text='Expected correct answer (case-insensitive match)', max_length=100)),
                ('hint', models.TextField(blank=True, help_text='Optional hint to assist user in solving the captcha')),
                ('explanation', models.TextField(blank=True, help_text='Optional explanation shown after correct/incorrect answer (for civic learning)')),
                ('difficulty', models.IntegerField(default=1, help_text='Scale from 0 (very easy) to 5 (very hard)')),
                ('tags', models.CharField(blank=True, help_text="Comma-separated keywords like 'elections,leadership,constitution'", max_length=255)),
                ('slug', models.SlugField(help_text='Unique slug for referencing or analytics', unique=True)),
                ('active', models.BooleanField(default=True, help_text='Only active captchas will be used during registration or civic flow')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Jumbled Constituency Captcha',
                'verbose_name_plural': 'Jumbled Constituency Captchas',
            },
        ),
        migrations.CreateModel(
            name='JumbledCountyCaptcha',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(help_text='Main question prompt (e.g., trivia, riddle, jumbled phrase)')),
                ('correct_answer', models.CharField(help_text='Expected correct answer (case-insensitive match)', max_length=100)),
                ('hint', models.TextField(blank=True, help_text='Optional hint to assist user in solving the captcha')),
                ('explanation', models.TextField(blank=True, help_text='Optional explanation shown after correct/incorrect answer (for civic learning)')),
                ('difficulty', models.IntegerField(default=1, help_text='Scale from 0 (very easy) to 5 (very hard)')),
                ('tags', models.CharField(blank=True, help_text="Comma-separated keywords like 'elections,leadership,constitution'", max_length=255)),
                ('slug', models.SlugField(help_text='Unique slug for referencing or analytics', unique=True)),
                ('active', models.BooleanField(default=True, help_text='Only active captchas will be used during registration or civic flow')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Jumbled County Captcha',
                'verbose_name_plural': 'Jumbled County Captchas',
            },
        ),
        migrations.CreateModel(
            name='JumbledLeaderCaptcha',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(help_text='Main question prompt (e.g., trivia, riddle, jumbled phrase)')),
                ('correct_answer', models.CharField(help_text='Expected correct answer (case-insensitive match)', max_length=100)),
                ('hint', models.TextField(blank=True, help_text='Optional hint to assist user in solving the captcha')),
                ('explanation', models.TextField(blank=True, help_text='Optional explanation shown after correct/incorrect answer (for civic learning)')),
                ('difficulty', models.IntegerField(default=1, help_text='Scale from 0 (very easy) to 5 (very hard)')),
                ('tags', models.CharField(blank=True, help_text="Comma-separated keywords like 'elections,leadership,constitution'", max_length=255)),
                ('slug', models.SlugField(help_text='Unique slug for referencing or analytics', unique=True)),
                ('active', models.BooleanField(default=True, help_text='Only active captchas will be used during registration or civic flow')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Jumbled Leader Captcha',
                'verbose_name_plural': 'Jumbled Leader Captchas',
            },
        ),
        migrations.CreateModel(
            name='JumbledWardCaptcha',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(help_text='Main question prompt (e.g., trivia, riddle, jumbled phrase)')),
                ('correct_answer', models.CharField(help_text='Expected correct answer (case-insensitive match)', max_length=100)),
                ('hint', models.TextField(blank=True, help_text='Optional hint to assist user in solving the captcha')),
                ('explanation', models.TextField(blank=True, help_text='Optional explanation shown after correct/incorrect answer (for civic learning)')),
                ('difficulty', models.IntegerField(default=1, help_text='Scale from 0 (very easy) to 5 (very hard)')),
                ('tags', models.CharField(blank=True, help_text="Comma-separated keywords like 'elections,leadership,constitution'", max_length=255)),
                ('slug', models.SlugField(help_text='Unique slug for referencing or analytics', unique=True)),
                ('active', models.BooleanField(default=True, help_text='Only active captchas will be used during registration or civic flow')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Jumbled Ward Captcha',
                'verbose_name_plural': 'Jumbled Ward Captchas',
            },
        ),
    ]
