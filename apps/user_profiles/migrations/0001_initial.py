# Generated by Django 5.2.4 on 2025-07-18 16:21

import apps.common.validators.identity
import django.db.models.deletion
import django_countries.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AgeRange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text="Machine-readable slug (e.g., 'age_18_24')", max_length=32, null=True, unique=True)),
                ('label', models.CharField(help_text="Display label for age bracket (e.g., '18–24')", max_length=50, unique=True)),
                ('position', models.PositiveIntegerField(help_text='Ordering position (lower appears first in dropdowns)', null=True)),
            ],
            options={
                'verbose_name': 'Age Range',
                'verbose_name_plural': 'Age Ranges',
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='CivicInterestArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text="Machine-friendly code (e.g., 'elections') used in filters and URLs", max_length=32, unique=True)),
                ('label', models.CharField(help_text="Human-readable display name (e.g., 'Elections & Voting')", max_length=64)),
                ('description', models.TextField(blank=True, help_text='Optional description for tooltips, dashboards, or civic education modules')),
                ('icon', models.CharField(blank=True, help_text="Optional FontAwesome or custom icon class (e.g., 'fa-vote-yea')", max_length=64)),
            ],
            options={
                'verbose_name': 'Civic Interest Area',
                'verbose_name_plural': 'Civic Interest Areas',
                'ordering': ['label'],
            },
        ),
        migrations.CreateModel(
            name='County',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text="Official 3-digit county code (e.g., '047')", max_length=3, unique=True)),
                ('name', models.CharField(help_text="County name (e.g., 'Nairobi')", max_length=64, unique=True)),
            ],
            options={
                'verbose_name': 'County',
                'verbose_name_plural': 'Counties',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='EducationLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.PositiveIntegerField(default=0, help_text='Controls display order (lower = higher priority)')),
                ('code', models.CharField(help_text="Machine-readable slug (e.g., 'secondary_completed')", max_length=32, unique=True)),
                ('label', models.CharField(help_text="Human-readable education level (e.g. 'Secondary Completed')", max_length=64)),
            ],
            options={
                'verbose_name': 'Education Level',
                'verbose_name_plural': 'Education Levels',
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='Gender',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text="Machine-readable gender code (e.g., 'female', 'male', 'other')", max_length=32, null=True, unique=True)),
                ('label', models.CharField(help_text="Display name (e.g., 'Female', 'Male', 'Other')", max_length=64)),
                ('position', models.PositiveSmallIntegerField(default=0, help_text='Controls display order in dropdowns and filters')),
            ],
            options={
                'verbose_name': 'Gender',
                'verbose_name_plural': 'Genders',
                'ordering': ['position', 'label'],
            },
        ),
        migrations.CreateModel(
            name='ReferralSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text="Internal slug (e.g., 'facebook', 'radio', 'public_baraza')", max_length=32, unique=True)),
                ('label', models.CharField(help_text="Display label (e.g., 'Friend or Family', 'Flyer or Poster')", max_length=64)),
                ('category', models.CharField(blank=True, help_text="Optional grouping (e.g., 'Media', 'Offline', 'Partner')", max_length=32)),
                ('position', models.PositiveSmallIntegerField(default=0, help_text='Ordering index (lower = higher)')),
            ],
            options={
                'verbose_name': 'Referral Source',
                'verbose_name_plural': 'Referral Sources',
                'ordering': ['position', 'label'],
            },
        ),
        migrations.CreateModel(
            name='ResidencyType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.PositiveSmallIntegerField(default=0, help_text='Display order (lower = higher priority)')),
                ('code', models.CharField(help_text="Machine-readable slug (e.g., 'urban', 'rural', 'nomadic')", max_length=32, unique=True)),
                ('label', models.CharField(help_text="Display label for forms and admin (e.g., 'Urban')", max_length=64)),
            ],
            options={
                'verbose_name': 'Residency Type',
                'verbose_name_plural': 'Residency Types',
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='Constituency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Constituency name (e.g., 'Lang’ata')", max_length=64)),
                ('county', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='constituencies', to='user_profiles.county')),
            ],
            options={
                'verbose_name': 'Constituency',
                'verbose_name_plural': 'Constituencies',
                'ordering': ['county__code', 'name'],
                'unique_together': {('name', 'county')},
            },
        ),
        migrations.CreateModel(
            name='Ward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Ward name (e.g., 'South B')", max_length=64)),
                ('latitude', models.FloatField(blank=True, help_text='Latitude coordinate for the ward (if known)', null=True)),
                ('longitude', models.FloatField(blank=True, help_text='Longitude coordinate for the ward (if known)', null=True)),
                ('constituency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wards', to='user_profiles.constituency')),
            ],
            options={
                'verbose_name': 'Ward',
                'verbose_name_plural': 'Wards',
                'ordering': ['constituency__county__code', 'constituency__name', 'name'],
                'unique_together': {('name', 'constituency')},
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_image', models.ImageField(blank=True, default='user_profiles/defaults/unisex_kenyan_flag.webp', help_text='Optional profile image. Only visible to you and administrators. Default image shown if none is uploaded. Never shown publicly without your explicit consent.', null=True, upload_to='user_profiles/profile_images/', verbose_name='Profile photo')),
                ('profile_image_visible', models.BooleanField(default=False, help_text='Allow your profile image to be shown publicly (optional).', verbose_name='Allow public profile photo')),
                ('current_country_of_residence', django_countries.fields.CountryField(blank=True, help_text='Your current country of residence (optional if outside Kenya).', max_length=2, null=True)),
                ('has_voted_before', models.BooleanField(default=False)),
                ('knows_voting_process', models.BooleanField(default=False)),
                ('wants_bill_notifications', models.BooleanField(default=False)),
                ('country_from_phone_code', models.CharField(default='undetermined', editable=False, max_length=32)),
                ('whatsapp_opt_in_number', models.CharField(blank=True, help_text='WhatsApp number in E.164 format (e.g., +254712345678). Optional.', max_length=20, validators=[apps.common.validators.identity.validate_phone_e164])),
                ('registered_at', models.DateTimeField(auto_now_add=True)),
                ('registration_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('age_range', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='user_profiles.agerange')),
                ('civic_interest_areas', models.ManyToManyField(blank=True, help_text='Select your key areas of civic interest (max 3–5 recommended).', to='user_profiles.civicinterestarea')),
                ('constituency', models.ForeignKey(blank=True, help_text='Select your constituency (filtered based on county).', null=True, on_delete=django.db.models.deletion.SET_NULL, to='user_profiles.constituency')),
                ('county', models.ForeignKey(blank=True, help_text='Select your county of residence.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='user_profiles.county')),
                ('county_of_origin', models.ForeignKey(blank=True, help_text='(Optional) County you consider your ancestral or cultural origin.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='profiles_originating_from', to='user_profiles.county')),
                ('education_level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='user_profiles.educationlevel')),
                ('gender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='user_profiles.gender')),
                ('referral_source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='user_profiles.referralsource')),
                ('residency_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='user_profiles.residencytype')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('ward', models.ForeignKey(blank=True, help_text='Select your ward (filtered based on constituency).', null=True, on_delete=django.db.models.deletion.SET_NULL, to='user_profiles.ward')),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
    ]
